

@{
    ViewBag.Title = "Sensor graph";
}

<h2>@ViewBag.description History</h2>

<h3>
    <small>Node<span>@ViewBag.nodeId</span> Sensor<span>@ViewBag.sensorId</span></small>
    <div class="btn-group pull-right" role="group" aria-label="...">
        <a class='btn btn-default' href='../../../Gateway/Control'>
            Control Nodes
        </a>
        <a class='btn btn-default' href='../../Log/@ViewBag.nodeId/@ViewBag.sensorId'>
            History Log
        </a>
    </div>
</h3>
<br />


<div class="panel panel-default">
    <div class="panel-heading">@ViewBag.description History</div>
    <div class="panel-body">
        <div id="chartPanel" style="display: none;">
            <div id="visualization"></div>
            <p>
                <br />
                <div class="btn-group pull-right" role="group" aria-label="...">
                    <a class='btn btn-default' href='../../ClearHistoryByDbId/@ViewBag.db_Id'>
                        Clear History
                    </a>
                </div>

                <label for="update">Update:</label>
                <select id="update">
                    <option value="none" selected>None</option>
                    <option value="continuous">Continuous</option>
                    <option value="discrete">Discrete</option>
                    <option value="static">Static</option>
                </select>

                <label for="charttype">Style:</label>
                <select id="charttype" onchange="updateCharType()">
                    <option value="bars" selected>Bars</option>
                    <option value="splines">Splines</option>
                    <option value="shadedsplines">Shaded Splines</option>
                    <option value="lines">Lines</option>
                    <option value="shadedlines">Shaded Lines</option>
                </select>
            </p>
        </div>
        <div id="infoPanel">
            There is a data request...
        </div>
    </div>
</div>




@section styles
{
    <link href="~/Content/vis.min.css" rel="stylesheet" />

}



@section scripts
{

    <script src="~/Scripts/vis.min.js"></script>

    <script type="text/javascript">


        var groups = new vis.DataSet();
        groups.add({ id: 0 });

        /* groups.add({
             id: 1,
             //  className: 'vis-graph-group0',
            // options: {excludeFromLegend: true}
        });*/

        var DELAY = 1000; // delay in ms to add new data points

        var update = document.getElementById('update');
        var charttype = document.getElementById('charttype');

        // create a graph2d with an (currently empty) dataset
        var container = document.getElementById('visualization');
        var dataset = new vis.DataSet();

        var options = {
            start: vis.moment().add(-30, 'seconds'), // changed so its faster
            end: vis.moment(),
            drawPoints: { style: 'circle' },
            shaded: { orientation: 'bottom' }
        };


        var graph2d = new vis.Graph2d(container, dataset, groups, options);


        function renderStep() {
            var now = vis.moment();
            var range = graph2d.getWindow();
            var interval = range.end - range.start;
            switch (update.value) {
                case 'continuous':
                    graph2d.setWindow(now - interval, now, { animation: false });
                    requestAnimationFrame(renderStep);
                    break;
                case 'discrete':
                    graph2d.setWindow(now - interval, now, { animation: false });
                    setTimeout(renderStep, DELAY);
                    break;
                case 'none':
                    setTimeout(renderStep, DELAY);
                    break;
                default: // 'static'
                    // move the window 90% to the left when now is larger than the end of the window
                    if (now > range.end) {
                        graph2d.setWindow(now - 0.1 * interval, now + 0.9 * interval);
                    }
                    setTimeout(renderStep, DELAY);
                    break;
            }
        }

        renderStep();


        $(document).ready(function() {
            $.ajax({
                url: "../../GetSensorDataJsonByDbId/" + @ViewBag.db_Id,
                dataType: "json",
                success: function(data) {
                    if ("chartData" in data) {
                        // console.log(data);
                        addChartData(data.chartData);
                        $('#infoPanel').hide();
                        $('#chartPanel').fadeIn(1000);
                    } else {
                        $('#infoPanel').html("There are no entries in history");
                    }
                },
                error: function() {
                    $('#infoPanel').html("<p class='text-danger'>Failed to get data from server!</p>");
                }
            });

            updateCharType();

        });


        function addChartData(chartData) {
            var start = vis.moment(chartData[0].x).add(-1, 'seconds');
            var end = vis.moment(chartData[chartData.length - 1].x).add(1, 'seconds');

            var options = {
                start: start,
                end: end
            };

            graph2d.setOptions(options);

            dataset.add(chartData);
        }

        function updateCharType() {
            var options;
            switch (charttype.value) {
                case 'bars':
                    options = {
                        style: 'bar',
                        drawPoints: false,
                        barChart: { width: 50, align: 'right', sideBySide: false }
                    };
                    graph2d.setOptions(options);
                    break;
                case 'splines':
                    options = {
                        style: 'line',
                        drawPoints: { style: 'circle' },
                        shaded: {enabled: false },
                        interpolation:{enabled: true}
                    };
                    graph2d.setOptions(options);
                    break;
                case 'shadedsplines':
                    options = {
                        style: 'line',
                        drawPoints: { style: 'circle' },
                        shaded: {enabled: true , orientation: 'bottom' },
                        interpolation:{enabled: true}
                    };
                    break;
                case 'lines':
                    options = {
                        style: 'line',
                        drawPoints: { style: 'circle' },
                        shaded: {enabled: false  },
                        interpolation:{enabled: false}
                    };
                    break;
                case 'shadedlines':
                    options = {
                        style: 'line',
                        drawPoints: { style: 'circle' },
                        shaded: {enabled: true , orientation: 'bottom' },
                        interpolation:{enabled: false}
                    };
                    break;
                default:
                    break;
            }

            graph2d.setOptions(options);

        }
    </script>
}