

@{
    ViewBag.Title = "Sensor graph";
}

<h2>@ViewBag.description History</h2>

<h3>
    <small>Node<span>@ViewBag.nodeId</span> Sensor<span>@ViewBag.sensorId</span></small>
</h3>
<hr/>
<p>
    <label for="strategy">Update:</label>
    <select id="strategy">
        <option value="none" selected>None</option>
        <option value="continuous">Continuous</option>
        <option value="discrete">Discrete</option>
        <option value="static">Static</option>
    </select>
</p>

<div class="panel panel-default">
    <div class="panel-heading">@ViewBag.description History</div>
    <div class="panel-body">
        <div id="visualization"></div>
    </div>
</div>


@section styles
{
    <link href="~/Content/vis.min.css" rel="stylesheet" />

}



@section scripts
{

    <script src="~/Scripts/vis.min.js"></script>

    <script type="text/javascript">



        var groups = new vis.DataSet();
        groups.add({ id: 0 });

        /* groups.add({
             id: 1,
             //  className: 'vis-graph-group0',
            // options: {excludeFromLegend: true}
        });*/

        var DELAY = 1000; // delay in ms to add new data points

        var strategy = document.getElementById('strategy');

        // create a graph2d with an (currently empty) dataset
        var container = document.getElementById('visualization');
        var dataset = new vis.DataSet();

        var options = {
            start: vis.moment().add(-30, 'seconds'), // changed so its faster
            end: vis.moment(),
            drawPoints: {style: 'circle' },
            shaded: {orientation: 'bottom' }
        };



       var graph2d = new vis.Graph2d(container, dataset, groups, options);


        function renderStep() {
            // move the window (you can think of different strategies).
            var now = vis.moment();
            var range = graph2d.getWindow();
            var interval = range.end - range.start;
            switch (strategy.value) {
                case 'continuous':
                    // continuously move the window
                    graph2d.setWindow(now - interval, now, { animation: false });
                    requestAnimationFrame(renderStep);
                    break;

                case 'discrete':
                    graph2d.setWindow(now - interval, now, { animation: false });
                    setTimeout(renderStep, DELAY);
                    break;


                case 'none':
                    setTimeout(renderStep, DELAY);
                    break;

                default: // 'static'
                    // move the window 90% to the left when now is larger than the end of the window
                    if (now > range.end) {
                        graph2d.setWindow(now - 0.1 * interval, now + 0.9 * interval);
                    }
                    setTimeout(renderStep, DELAY);
                    break;
            }
        }
        renderStep();


        $( document ).ready(function() {
            $.ajax({
                url: "../../GetSensorDataJson/"+@ViewBag.db_Id,
                dataType: "json",
                success: function (data) {
                    // console.log(data);
                    if (data.dataType == "V_TRIPPED")
                   //     addFloatData(data.chartData);
                    addBinaryData(data.chartData);
                    else
                        addFloatData(data.chartData);
                },
                fail: function () {
                    alert("Failed to get data from server!");
                }
            });
        });

        function addBinaryData(chartData) {
            var start = vis.moment(chartData[0].x).add(-1, 'seconds');
            var end = vis.moment(chartData[chartData.length - 1].x).add(1, 'seconds');
            var options = {
                start: start,
                end: end,
                style : 'bar',
                drawPoints : false,
                barChart: {width:50, align:'right', sideBySide:false}
            };
            graph2d.setOptions(options);

            dataset.add(chartData);
        }

        function addFloatData(chartData) {

            var start = vis.moment(chartData[0].x).add(-1, 'seconds');
            var end = vis.moment(chartData[chartData.length - 1].x).add(1, 'seconds');
            var options = {
                start: start,
                end: end,
                drawPoints: {style: 'circle' },
                shaded: {orientation: 'bottom'}
            };
            graph2d.setOptions(options);

            dataset.add(chartData);
        }
    </script>
}