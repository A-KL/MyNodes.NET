@model MyNetSensors.NodeTasks.SensorTask

@{
    ViewBag.Title = "Edit Task";
}

<h2>Edit Task for @ViewBag.description</h2>
<div>
    < @Html.ActionLink("Control Nodes", "Control", "Gateway")
    < @Html.ActionLink("Tasks List", "List", new { id = Model.nodeId, id2 = Model.sensorId })
</div>
<hr />
<br/>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.nodeId)
    @Html.HiddenFor(model => model.sensorId)
    @Html.HiddenFor(model => model.dataType)
    @Html.HiddenFor(model => model.db_Id)
    @Html.HiddenFor(model => model.enabled)

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            <label class="control-label col-sm-3">Task description</label>
            <div class="col-sm-9">
                @Html.EditorFor(model => model.description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
            </div>
        </div>



        <div class="form-group">
            <label class="control-label col-sm-3">Execution date</label>
            <div class="col-sm-9">
                @Html.EditorFor(model => model.executionDate, new { htmlAttributes = new { @class = "form-control", @id = "datetimepicker1" } })
                @Html.ValidationMessageFor(model => model.executionDate, "", new { @class = "text-danger" })
            </div>
        </div>




        <div class="form-group">
            <label class="control-label col-sm-3">Repeat task</label>
            <div class="col-sm-9">
                @Html.CheckBoxFor(model => model.isRepeating, new { @class = "switch", @data_size = "small", @data_label_width = "0", @id = "repeatTask" })
            </div>
        </div>


        <div id="nonRepeatingPanel">
            <div class="form-group">
                <label class="control-label col-sm-3">Set value</label>
                <div class="col-sm-9">
                    @Html.EditorFor(model => model.executionValue, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.executionValue, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div id="repeatingPanel" style="display:none">
            <div class="form-group">
                <label class="control-label col-sm-3">Repeat A value</label>
                <div class="col-sm-9">
                    @Html.EditorFor(model => model.repeatingAValue, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.repeatingAValue, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-sm-3">Repeat B value</label>
                <div class="col-sm-9">
                    @Html.EditorFor(model => model.repeatingBValue, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.repeatingBValue, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-sm-3">Repeat interval (ms)</label>
                <div class="col-sm-9">
                    @Html.EditorFor(model => model.repeatingInterval, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.repeatingInterval, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-sm-3">Repeat count<br /> (0 for infinity)</label>
                <div class="col-sm-9">
                    @Html.EditorFor(model => model.repeatingNeededCount, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.repeatingNeededCount, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-sm-offset-3 col-sm-9">
                <div class="btn-group">
                    <input type="submit" value="Save" class="btn btn-primary" />
                    @Html.ActionLink("Cancel", "List", new { id = Model.nodeId, id2 = Model.sensorId }, new { @class = "btn btn-default" })
                </div>
            </div>
        </div>
    </div>
}




@section scripts
{

    <script>
        var fade = 500;

        $(".switch").bootstrapSwitch();

        $("#repeatTask").on('switchChange.bootstrapSwitch', function (event, state) {
            if (state) {
                $('#repeatingPanel').fadeIn(fade);
                $('#nonRepeatingPanel').hide();
            } else {
                $('#repeatingPanel').hide();
                $('#nonRepeatingPanel').fadeIn(fade);
            }
        });

        if ($("#repeatTask").attr("checked"))
        {
            $('#repeatingPanel').show();
            $('#nonRepeatingPanel').hide();
        }

        $(function () {
            $('#datetimepicker1').datetimepicker({
                format: 'DD/MM/YYYY HH:mm:ss'
            });
        });
    </script>
}