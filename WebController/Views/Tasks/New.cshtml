@using MyNetSensors.NodesTasks
@model MyNetSensors.NodesTasks.NodeTask

@{
    ViewBag.Title = "New Task for " + @ViewBag.description;
}

<br />
<div class="ui container">

    <h2>@ViewBag.Title</h2>
    <p>
        < <a asp-controller="Gateway" asp-action="Control">Control Nodes</a>
        < <a asp-controller="Tasks" asp-action="List">Tasks</a>
    </p>
    <div class="ui divider"></div>

    <div class="ui two column stackable centered grid">
        <div class="column">
            <div class="ui raised segments">
                <div class="ui secondary segment">
                    <h4>New Task</h4>
                </div>

                <form asp-action="New" asp-anti-forgery="true" class="ui form">
                    <div class="ui attached segment">

                        @Html.HiddenFor(model => model.nodeId)
                        @Html.HiddenFor(model => model.sensorId)
                        @Html.HiddenFor(model => model.sensorDbId)
                        @Html.HiddenFor(model => model.sensorDescription)
                        @Html.HiddenFor(model => model.dataType)
                        @Html.HiddenFor(model => model.enabled)


                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="field">
                            <label>Task description</label>
                            @Html.EditorFor(model => model.description, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
                        </div>

                        <div class="field">
                            <label>Execution date</label>
                            <input type="text" asp-for="executionDate" id="datetimepicker1">

                            @*@Html.EditorFor(model => model.executionDate, new { htmlAttributes = new { @class = "form-control", @id = "datetimepicker1" } })*@
                            @Html.ValidationMessageFor(model => model.executionDate, "", new { @class = "text-danger" })
                        </div>

                        <div class="field">
                            <div class="ui toggle checkbox">
                                <input type="checkbox" id="repeatTask"
                                       @if (Model.isRepeating) { @: checked
                                                                                                                                                            }>
                                <input type="hidden" id="repeatTask" value="false">
                                <label>Repeat task</label>
                            </div>
                        </div>





                        <div id="nonRepeatingPanel">
                            <div class="field">
                                <label>Set value</label>
                                @Html.EditorFor(model => model.executionValue, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.executionValue, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div id="repeatingPanel" style="display: none">
                            <div class="fields">
                                <div class="field">
                                    <label>Repeat A value</label>
                                    @Html.EditorFor(model => model.repeatingAValue, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.repeatingAValue, "", new { @class = "text-danger" })
                                </div>

                                <div class="field">
                                    <label>Repeat B value</label>
                                    @Html.EditorFor(model => model.repeatingBValue, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.repeatingBValue, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="fields">

                                <div class="field">
                                    <label>Repeat count (0 for infinity)</label>
                                    @Html.EditorFor(model => model.repeatingNeededCount, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.repeatingNeededCount, "", new { @class = "text-danger" })
                                </div>

                                <div class="field">
                                    <label>Repeat interval (ms)</label>
                                    @Html.EditorFor(model => model.repeatingInterval, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.repeatingInterval, "", new { @class = "text-danger" })
                                </div>


                            </div>
                        </div>

                    </div>
                    <div class="ui center aligned attached segment">
                        <div class="ui buttons">
                            <a asp-controller="Tasks" asp-action="List" class="ui button">Cancel</a>
                            <input type="submit" value="Create" class="ui primary button" />
                        </div>
                    </div>
                </form>

            </div>
        </div>
    </div>
</div>




@section scripts
{

    <script>
        var fade = 500;


        $("#repeatTask").click(function () {
            if ($(this).is(":checked")) {
                $('#repeatingPanel').fadeIn(fade);
                $('#nonRepeatingPanel').hide();
            } else {
                $('#repeatingPanel').hide();
                $('#nonRepeatingPanel').fadeIn(fade);
            }
        });

        $(function () {
            $('#datetimepicker1').daterangepicker({
                format: 'DD.MM.YYYY HH:mm:ss',
                "singleDatePicker": true,
                "timePicker": true,
                "timePickerIncrement": 1,
                "timePicker12Hour": false,
                "timePickerSeconds": true
            });
        });
    </script>
}
